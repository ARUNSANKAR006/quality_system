import React, { useState } from "react";
import { Upload, Loader2, CheckCircle2, XCircle } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function ImageUpload() {
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleFileChange = (e) => {
    const selected = e.target.files[0];
    if (selected) {
      setFile(selected);
      setPreview(URL.createObjectURL(selected));
      setResult(null);
      setError(null);
    }
  };

  const handleUpload = async () => {
    if (!file) return;

    setLoading(true);
    setResult(null);
    setError(null);

    const formData = new FormData();
    formData.append("file", file);

    try {
      const response = await fetch("http://localhost:5000/predict", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();
      setResult(data);
    } catch (err) {
      console.error("Prediction failed:", err);
      setError("Prediction failed. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gradient-to-br from-gray-100 to-blue-50">
      <div className="w-full max-w-md p-6 bg-white rounded-2xl shadow-xl">
        <h1 className="text-2xl font-bold text-center text-blue-700 mb-4">Defect Detection AI</h1>

        <label className="block mb-4 text-center">
          <input type="file" onChange={handleFileChange} className="hidden" />
          <span className="cursor-pointer text-blue-600 hover:underline">
            Choose an image
          </span>
        </label>

        {preview && (
          <motion.img
            src={preview}
            alt="preview"
            className="w-full h-64 object-cover rounded-lg mb-4 border"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          />
        )}

        <button
          onClick={handleUpload}
          disabled={loading}
          className="w-full flex items-center justify-center gap-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition"
        >
          {loading ? <Loader2 className="animate-spin" /> : <Upload />}
          {loading ? "Predicting..." : "Upload and Predict"}
        </button>

        <AnimatePresence>
          {result && (
            <motion.div
              className={`mt-4 p-4 rounded-lg text-center ${
                result.prediction === "defective"
                  ? "bg-red-100 text-red-700"
                  : "bg-green-100 text-green-700"
              }`}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0 }}
            >
              {result.prediction === "defective" ? (
                <XCircle className="mx-auto mb-2 w-6 h-6" />
              ) : (
                <CheckCircle2 className="mx-auto mb-2 w-6 h-6" />
              )}
              <p className="font-bold text-lg capitalize">
                Prediction: {result.prediction}
              </p>
              <p className="text-sm">Confidence: {(result.confidence * 100).toFixed(2)}%</p>
            </motion.div>
          )}

          {error && (
            <motion.div
              className="mt-4 p-3 rounded-lg bg-red-100 text-red-700 text-sm text-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              {error}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}

hlo